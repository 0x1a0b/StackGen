{"data":{"mdx":{"excerpt":"Troubleshooting StackGen Before diving into troubleshooting be sure to setup your environment Use debug mode while generating code.   Thisâ€¦","timeToRead":1,"frontmatter":{"title":"Troubleshooting","needsAuth":false},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Troubleshooting StackGen`), React.createElement(MDXTag, {\n    name: \"blockquote\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, `Before diving into troubleshooting be sure to setup your environment`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Use debug mode while generating code.`), `  This will greatly increase the verbosity of the output and the detailed information about the code generation process.`), React.createElement(\"div\", {\n    className: \"code-container\",\n    \"data-label\": \"java\"\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm btn-copy\",\n    title: \"Copy\"\n  }, React.createElement(\"svg\", {\n    className: \"lexicon-icon\"\n  }, React.createElement(\"use\", {\n    xlinkHref: \"/images/icons/icons.svg#paste\"\n  }))), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, React.createElement(\"pre\", {\n    className: \"gatsby-code-java\"\n  }, React.createElement(\"code\", {\n    className: \"gatsby-code-java\"\n  }, \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \" \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"-\"), \"Ddebug\", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), React.createElement(\"span\", {\n    className: \"token boolean\"\n  }, \"true\"), \" \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"-\"), \"DdebugSwagger\", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), React.createElement(\"span\", {\n    className: \"token boolean\"\n  }, \"true\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"))))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Turn on trace debugging for the Generator`), ` The default log file for the app generator is located at:`), React.createElement(\"div\", {\n    className: \"code-container\",\n    \"data-label\": \"undefined\"\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm btn-copy\",\n    title: \"Copy\"\n  }, React.createElement(\"svg\", {\n    className: \"lexicon-icon\"\n  }, React.createElement(\"use\", {\n    xlinkHref: \"/images/icons/icons.svg#paste\"\n  }))), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, React.createElement(\"pre\", {\n    className: \"gatsby-code-text\"\n  }, React.createElement(\"code\", {\n    className: \"gatsby-code-text\"\n  }, \"starter-ignite-gen.log\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Increase the verbosity of the output log`), ` Change the rootCategory to \"TRACE\" from the default of \"WARN.\"`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"strong\"\n  }, `/src/main/resources/application.properties`))), React.createElement(\"div\", {\n    className: \"code-container\",\n    \"data-label\": \"undefined\"\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm btn-copy\",\n    title: \"Copy\"\n  }, React.createElement(\"svg\", {\n    className: \"lexicon-icon\"\n  }, React.createElement(\"use\", {\n    xlinkHref: \"/images/icons/icons.svg#paste\"\n  }))), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, React.createElement(\"pre\", {\n    className: \"gatsby-code-text\"\n  }, React.createElement(\"code\", {\n    className: \"gatsby-code-text\"\n  }, \"# Set root category priority to INFO and its only appender to CONSOLE.\", \"\\n\", \"log4j.rootCategory=TRACE, CONSOLE, fileAppender\", \"\\n\", \"...\", \"\\n\", \"log4j.appender.fileAppender.File=logs/starter-ignite-gen.log\")))), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Troubleshooting issues with the input Swagger/OpenAPI`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Avoiding the usage of reserved words in StackGen can be difficult as there are quite a few opportunities for code generation to build a forbidden string deep in the codebase.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In some cases an auto-generated source file will collide with reserved word handling. This can result in hard to explain uses of reserved words not found in your input Swagger spec.`), React.createElement(\"div\", {\n    className: \"code-container\",\n    \"data-label\": \"undefined\"\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm btn-copy\",\n    title: \"Copy\"\n  }, React.createElement(\"svg\", {\n    className: \"lexicon-icon\"\n  }, React.createElement(\"use\", {\n    xlinkHref: \"/images/icons/icons.svg#paste\"\n  }))), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, React.createElement(\"pre\", {\n    className: \"gatsby-code-text\"\n  }, React.createElement(\"code\", {\n    className: \"gatsby-code-text\"\n  }, \"[main] WARN io.swagger.codegen.languages.AbstractJavaCodegen - ApiResponse (reserved word) cannot be used as model name. Renamed to ModelApiResponse\", \"\\n\", \"...\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In this case, everything compiles fine, but there is an exception when running the Spring Boot generated service as there is no matching Autowire implementation for ApiResponseApiDelegate -- it has been renamed to ModelApiResponseApiDelegate causing a naming mismatch.`), React.createElement(\"div\", {\n    className: \"code-container\",\n    \"data-label\": \"undefined\"\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm btn-copy\",\n    title: \"Copy\"\n  }, React.createElement(\"svg\", {\n    className: \"lexicon-icon\"\n  }, React.createElement(\"use\", {\n    xlinkHref: \"/images/icons/icons.svg#paste\"\n  }))), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, React.createElement(\"pre\", {\n    className: \"gatsby-code-text\"\n  }, React.createElement(\"code\", {\n    className: \"gatsby-code-text\"\n  }, \"[INFO] ------------------------------------------------------------------------\", \"\\n\", \"[INFO] BUILD FAILURE\", \"\\n\", \"[INFO] ------------------------------------------------------------------------\", \"\\n\", \"[INFO] Total time: 26.356 s\", \"\\n\", \"[INFO] Finished at: 2018-12-18T12:17:17-08:00\", \"\\n\", \"[INFO] Final Memory: 57M/769M\", \"\\n\", \"[INFO] ------------------------------------------------------------------------\", \"\\n\", \"[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.5.9.RELEASE:run (default-cli) on project ignite: An exception occurred while running. null: InvocationTargetException: Error creating bean with name 'apiResponseApiController' defined in file [../StarterStackGen/gen/target/classes/io/starter/ignite/api/ApiResponseApiController.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'io.starter.ignite.api.ApiResponseApiDelegate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: \", \"{\", \"}\", \" -> [Help 1]\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Some reserved words to avoid in the Swagger specification:`), React.createElement(\"div\", {\n    className: \"code-container\",\n    \"data-label\": \"undefined\"\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm btn-copy\",\n    title: \"Copy\"\n  }, React.createElement(\"svg\", {\n    className: \"lexicon-icon\"\n  }, React.createElement(\"use\", {\n    xlinkHref: \"/images/icons/icons.svg#paste\"\n  }))), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, React.createElement(\"pre\", {\n    className: \"gatsby-code-text\"\n  }, React.createElement(\"code\", {\n    className: \"gatsby-code-text\"\n  }, \"// used as internal variables, can collide with parameter names\", \"\\n\", \"\\\"localVarPath\\\", \\\"localVarQueryParams\\\", \\\"localVarCollectionQueryParams\\\",\", \"\\n\", \"\\\"localVarHeaderParams\\\", \\\"localVarFormParams\\\", \\\"localVarPostBody\\\",\", \"\\n\", \"\\\"localVarAccepts\\\", \\\"localVarAccept\\\", \\\"localVarContentTypes\\\",\", \"\\n\", \"\\\"localVarContentType\\\", \\\"localVarAuthNames\\\", \\\"localReturnType\\\",\", \"\\n\", \"\\\"ApiClient\\\", \\\"ApiException\\\", \\\"ApiResponse\\\", \\\"Configuration\\\", \\\"StringUtil\\\",\", \"\\n\", \"\\n\", \"// language reserved words\", \"\\n\", \"\\\"abstract\\\", \\\"continue\\\", \\\"for\\\", \\\"new\\\", \\\"switch\\\", \\\"assert\\\",\", \"\\n\", \"\\\"default\\\", \\\"if\\\", \\\"package\\\", \\\"synchronized\\\", \\\"boolean\\\", \\\"do\\\", \\\"goto\\\", \\\"private\\\",\", \"\\n\", \"\\\"this\\\", \\\"break\\\", \\\"double\\\", \\\"implements\\\", \\\"protected\\\", \\\"throw\\\", \\\"byte\\\", \\\"else\\\",\", \"\\n\", \"\\\"import\\\", \\\"public\\\", \\\"throws\\\", \\\"case\\\", \\\"enum\\\", \\\"instanceof\\\", \\\"return\\\", \\\"transient\\\",\", \"\\n\", \"\\\"catch\\\", \\\"extends\\\", \\\"int\\\", \\\"short\\\", \\\"try\\\", \\\"char\\\", \\\"final\\\", \\\"interface\\\", \\\"static\\\",\", \"\\n\", \"\\\"void\\\", \\\"class\\\", \\\"finally\\\", \\\"long\\\", \\\"strictfp\\\", \\\"volatile\\\", \\\"const\\\", \\\"float\\\",\", \"\\n\", \"\\\"native\\\", \\\"super\\\", \\\"while\\\", \\\"null\\\")\")))), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Troubleshooting issues with compiling the generated output code`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `One issue that can occur is when regenerating Stacks that have changes to the schema fields but with:`), React.createElement(\"div\", {\n    className: \"code-container\",\n    \"data-label\": \"undefined\"\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm btn-copy\",\n    title: \"Copy\"\n  }, React.createElement(\"svg\", {\n    className: \"lexicon-icon\"\n  }, React.createElement(\"use\", {\n    xlinkHref: \"/images/icons/icons.svg#paste\"\n  }))), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, React.createElement(\"pre\", {\n    className: \"gatsby-code-text\"\n  }, React.createElement(\"code\", {\n    className: \"gatsby-code-text\"\n  }, \"java ... -DdbGenDropTable=false\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In this scenario, the data API and DAO objects are generated from the updated schema, but when the database mappings occur, the columns are based upon the prior schema.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You will see this exhibited as a Compilation failure similar to the following. Note that all the other mapped classes and schema files are OK and only the fields missing via the column changes are not found:`), React.createElement(\"div\", {\n    className: \"code-container\",\n    \"data-label\": \"undefined\"\n  }, React.createElement(\"button\", {\n    className: \"btn btn-sm btn-copy\",\n    title: \"Copy\"\n  }, React.createElement(\"svg\", {\n    className: \"lexicon-icon\"\n  }, React.createElement(\"use\", {\n    xlinkHref: \"/images/icons/icons.svg#paste\"\n  }))), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, React.createElement(\"pre\", {\n    className: \"gatsby-code-text\"\n  }, React.createElement(\"code\", {\n    className: \"gatsby-code-text\"\n  }, \"[INFO] -------------------------------------------------------------\", \"\\n\", \"[ERROR] COMPILATION ERROR : \", \"\\n\", \"[INFO] -------------------------------------------------------------\", \"\\n\", \"[ERROR] gen/src/main/java/io/starter/stackgen/model/dao/StackgenOrder.java:[57,24] cannot find symbol\", \"\\n\", \"symbol:\", \"   \", \"variable tradeId\", \"\\n\", \"location: variable delegate of type io.starter.stackgen.model.Order\", \"\\n\", \"[ERROR] gen/src/main/java/io/starter/stackgen/model/dao/StackgenOrder.java:[69,17] cannot find symbol\", \"\\n\", \"symbol:\", \"   \", \"variable tradeId\", \"\\n\", \"location: variable delegate of type io.starter.stackgen.model.Order\", \"\\n\", \"[ERROR] gen/src/main/java/io/starter/stackgen/model/dao/StackgenOrder.java:[105,33] cannot find symbol\", \"\\n\", \"symbol:\", \"   \", \"variable executionDate\", \"\\n\", \"location: variable delegate of type io.starter.stackgen.model.Order\", \"\\n\", \"[ERROR] gen/src/main/java/io/starter/stackgen/model/dao/StackgenOrder.java:[121,17] cannot find symbol\", \"\\n\", \"symbol:\", \"   \", \"variable executionDate\", \"\\n\", \"location: variable delegate of type io.starter.stackgen.model.Order\", \"\\n\", \"[INFO] 4 errors \")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `To fix this issue: delete or rename the obsolete table manually in the target database, then re-run the generator. The single table will be re-generated and the columns will correctly reflect the updated schema.`), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, `Troubleshooting issues with running the generated output code`));\n});"}}},"pageContext":{"slug":"docs/support/troubleshooting.html","previous":{"fields":{"redirect":null,"slug":"docs/databases/configuring-jdbc.html","mainPage":false},"code":{"scope":"/Users/john/workspace2018_IGNITE/StarterIgnite/src/docs/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":false}}