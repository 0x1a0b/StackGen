swagger: '2.0'

        # TODO: type: string
        # format: uuid
        # example: d290f1ee-6c54-4b01-90e6-d701748f0851
info:
  description: This is the CoinBot API
  version: 1.0.0
  title: CoinBot API
  # put the contact info for your development or API team
  contact:
    email: info@starter.io
  license:
    name: AGPL 3.0
    url: https://www.gnu.org/licenses/agpl-3.0.html
  termsOfService: http://starter.io/tos/
servers:
  url: https://{username}.automator.ai:{port}/{basePath}
  description: The production API server
  variables:
    username:
      # note! no enum here means it is an open value
      default: demo
      description: this value is assigned by the service provider
    port:
      enum:
        - '8443'
        - '443'
      default: '8443'
    basePath:
      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
      default: v1
# tags are used for organizing operations
tags:
- name: admins
  description: Secured Admin-only calls
- name: users
  description: Operations available to regular users
schemes:
- https
paths:
  /account:
    post:
      tags:
      - "trade"
      summary: "Add a new account to the system"
      description: ""
      operationId: "addtrade"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "account object that needs to be added to the system"
        required: true
        schema:
          $ref: '#/definitions/Account'
      responses:
        405:
          description: "Invalid input"
      security:
      - automator_auth:
        - "write:Accounts"
        - "read:Accounts"
    put:
      tags:
      - "account"
      summary: "Update an existing account"
      description: ""
      operationId: "updateaccount"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "account object that needs to be edited in the system"
        required: true
        schema:
          $ref: '#/definitions/Account'
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "account not found"
        405:
          description: "Validation exception"
      security:
      - automator_auth:
        - "write:Accounts"
        - "read:Accounts"
  /account/findByID:
    get:
      tags:
      - "trade"
      summary: "Finds accounts by ID"
      description: "Multiple ID values can be provided with comma separated strings"
      operationId: "findtradesByID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "ID values that need to be considered for filter"
        required: true
        type: "array"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/account"
        400:
          description: "Invalid id value"
      security:
      - automator_auth:
        - "write:Accounts"
        - "read:Accounts"
  /trade:
    post:
      tags:
      - "trade"
      summary: "Add a new trade to the order"
      description: ""
      tradeId: "addtrade"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "trade object that needs to be added to the order"
        required: true
        schema:
          $ref: '#/definitions/Trades'
      responses:
        405:
          description: "Invalid input"
      security:
      - automator_auth:
        - "write:Trades"
        - "read:Trades"
    put:
      tags:
      - "trade"
      summary: "Update an existing trade"
      description: ""
      operationId: "updatetrade"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "trade object that needs to be added to the order"
        required: true
        schema:
          $ref: '#/definitions/Trades'
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "trade not found"
        405:
          description: "Validation exception"
      security:
      - automator_auth:
        - "write:Trades"
        - "read:Trades"
  /trade/findByStatus:
    get:
      tags:
      - "trade"
      summary: "Finds trades by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findtradesByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "closed"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Trades'
        400:
          description: "Invalid status value"
      security:
      - automator_auth:
        - "write:Trades"
        - "read:Trades"
  /content:
    get:
      tags:
      - users
      summary: searches content
      operationId: searchContent
      description: |
        By passing in the appropriate options, you can search for
        available content in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up content
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Content'
        400:
          description: bad input parameter
    post:
      tags:
      - admins
      summary: adds an content item
      operationId: addContent
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: contentItem
        description: Content item to add
        schema:
          $ref: '#/definitions/Content'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
/data:
    get:
      tags:
      - tickers
      summary: searches latest market data
      operationId: searchMarketData
      description: |
        By passing in the appropriate options, you can search for
        available market data in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up market data
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/MarketData'
        400:
          description: bad input parameter
    post:
      tags:
      - admins
      summary: adds an content item
      operationId: addMarketData
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: contentItem
        description: MarketData item to add
        schema:
          $ref: '#/definitions/MarketData'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists          
definitions:
  Account:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      balance:
        type: "number"
        format: "double"
      institutionName:
        type: "string"
      accountNumber:
        type: "string"
      routingNumber:
        type: "string"    
      modifiedDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Account Status"
        enum:
        - "ready"
        - "closed"
        - "executed"
      verified:
        type: "boolean"
        default: false
    xml:
      name: "Account"
  LedgerEntry:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      accountId:
        id:
        type: "integer"
        format: "int64"
      orderId:
        id:
        type: "integer"
        format: "int64"
      entryValue:
        type: "number"
        format: "double"
      institutionName:
        type: "string"
      description:
        type: "string"
      accountBalance:
        type: "number"
        format: "double"    
      modifiedDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Transaction Status"
        enum:
        - "ready"
        - "closed"
        - "executed"
      transactionType:
        type: "string"
        description: "Transaction Type"
        enum:
        - "debit"
        - "credit"
        - "deposit"        
        - "void"
        - "refund"
      verified:
        type: "boolean"
        default: false
    xml:
      name: "Account"
    x-automator-tag: "agd2asccs"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      tradeId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      executionDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "executed"
      complete:
        type: "boolean"
        default: false
      trades:
        type:
    xml:
      name: "Order"
    x-automator-tag: "agd2asccs"
  Content:
    type: object
    required:
    - id
    - name
    - author
    - organization
    - releaseDate
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: string
        example: Widget Adapter
      author:
        $ref: '#/definitions/User'
      releaseDate:
        type: string
        format: int32
        example: 2016-08-29T09:12:33.001Z
      organization:
        $ref: '#/definitions/Organization'
    xml:
      name: "Content"
    x-automator-tag: "agd2asccsd"        
  Organization:
    required:
    - id
    - name
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: string
        example: ACME Corporation
      homePage:
        type: string
        format: url
        example:  https://www.acme-corp.com
      phone:
        type: string
        example: 408-867-5309
    xml:
      name: "Organization"
    x-automator-tag: "agd2ascds"        
  Trades:
    required:
    - id
    - name
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: string
        example: Litespeed
      type:
        type: string
        example: MARKET
    xml:
      name: "Trades"
    x-automator-tag: "agd2ascdsd"                
  Location:
    required:
    - id
    - locationname
    - latitude
    - longitude
    properties:
      id:
        type: "integer"
        format: "int64"
      owner_id:
        type: "integer"
        format: "int64"
      elevation:
        type: "number"
        example: 37.7564084
      latitude:
        type: "number"
        example: 37.7564084
      longitude:
        type: string
        example: 122.4717396
      locationname:
        type: string
        example: Grand View Park
        secureField: true
      country:
        type: string
        example: USA
      email:
        type: string
        example: sparky@starter.io
      homePage:
        type: string
        format: url
        example:  https://www.starter.io
      phone:
        type: string
        example: 222-333-4444
    xml:
      name: "Location"
    x-automator-tag: "agd2asadss"                
  User:
    required:
    - id
    - username
    - email
    properties:
      id:
        id:
        type: "integer"
        format: "int64"
      fingerprint:
        type: string
        example: DK$DFSJaraDD
        value: secure
        secureField: true
      ssn:
        description: This is the value
        type: string
        example: 111-22-3333
        secureField: true
        maxLength: 10
        minLength: 10
        value: secure
      username:
        type: string
        example: Sparky
      homePage:
        type: string
        format: url
        example:  https://www.acme-corp.com
      social:
        type: string
        format: url
        example:  https://twitter.com/StarterIO
    xml:
      name: "User"
    x-automator-tag: "agd2asczzz"                
  WorkFlows:
    required:
    - id
    - description
    - json
    properties:
      id:
        id:
        type: "integer"
        format: "int64"
      fingerprint:
        type: string
        example: DK$DFSJaraDD
      sourceType:
        type: string
        example: user
      sourceOwner:
        type: string
        example: userId:d290f1ee-6c54-4b01-90e6-d701748f0851
      json:
        type: string
        example: Sparkyt
      xml:
        type: string
        example: Sparkyt        
      modifiedDate:
          format: "date-time"
    xml:
      name: "Workflows"
    x-automator-tag: "agd2cddds"                  
  Exchange:
    type: object
    required:
    - id
    - name
    - ticker
    properties:
      id:
        id:
        type: "integer"
        format: "int64"
      name:
        type: string
        example: Bitfinex
      ticker:
        type: string
        example: GDX        
      lastValidatedDate:
          format: "date-time"
      organization:
        $ref: '#/definitions/Organization'
      country:
        type: string
        example: CAN
    xml:
      name: "Exchange"
    x-automator-tag: "agd2aszzzs"                
  ContactMethod:        
    type: object
    required:
    - id
    - name
    - ticker
    properties:
      messageTypeDescription:
        type: string
        example: twitter handle
      messageType:
        type: string
        example: email
        enum:
        - "github"        
        - "email"
        - "twitter"
        - "mobile"
        - "sms"
        - "facebook"
      createDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Contact Method Status"
        enum:
        - "new"
        - "validated"
        - "closed"
        - "DNC"
        - "ADMIN"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "ContactMethod"
    x-automator-tag: "agd2zzcds"                
  AuditLog:
    required:
    - id
    - sourceType
    - json
    properties:
      id:
        type: "integer"
        format: "int64"
      fingerprint:
        type: string
        example: DK$DFSJaraDD
      sourceType:
        type: string
        example: user
      sourceOwner:
        type: string
        example: userId:1000
      json:
        type: string
        example: Sparkyt
        maxLength: 10000
      modifiedDate:
          format: "date-time"     
    xml:
      name: "AuditLog"
    x-automator-tag: "agd2rrcds"                     
  MaketData:
    required:
    - id
    - sourceType
    - json
    properties:
      id:
        type: "integer"
        format: "int64"
      fingerprint:
        type: string
        example: DK$DFSJaraDD
      sourceType:
        type: string
        example: user
      sourceOwner:
        type: string
        example: userId:1000
      json:
        type: string
        example: Sparkyt        
      modifiedDate:
          format: "date-time"                  
    xml:
      name: "MarketData"
    x-automator-tag: "agd2asyys"                  