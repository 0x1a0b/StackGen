{
    "openapi": "3.0.0",
    "info": {
        "description": "This is the CoinBot API",
        "version": "1.0.0",
        "title": "CoinBot API",
        "contact": {
            "email": "info@apicloud.co"
        },
        "license": {
            "name": "AGPL 3.0",
            "url": "https://www.gnu.org/licenses/agpl-3.0.html"
        },
        "termsOfService": "http://apicloud.co/tos/"
    },
    "servers": {
        "url": "https://{username}.automator.ai:{port}/{basePath}",
        "description": "The production API server",
        "variables": {
            "username": {
                "default": "demo",
                "description": "this value is assigned by the service provider"
            },
            "port": {
                "enum": [
                    "8443",
                    "443"
                ],
                "default": "8443"
            },
            "basePath": {
                "default": "v1"
            }
        }
    },
    "tags": [
        {
            "name": "admins",
            "description": "Secured Admin-only calls"
        },
        {
            "name": "users",
            "description": "Operations available to regular users"
        }
    ],
    "paths": {
        "/account": {
            "post": {
                "tags": [
                    "account"
                ],
                "summary": "Add a new account to the system",
                "description": "",
                "operationId": "addaccount",
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "automator_auth": [
                            "write:items",
                            "read:items"
                        ]
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            }
                        }
                    },
                    "description": "account object that needs to be added to the system",
                    "required": true
                },
                "parameters": []
            },
            "put": {
                "tags": [
                    "account"
                ],
                "summary": "Update an existing account",
                "description": "",
                "operationId": "updateaccount",
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Account not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "automator_auth": [
                            "write:items",
                            "read:items"
                        ]
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            }
                        }
                    },
                    "description": "account object that needs to be updated in the system",
                    "required": true
                },
                "parameters": []
            }
        },
        "/account/list": {
            "get": {
                "tags": [
                    "account"
                ],
                "summary": "Finds accounts by ID",
                "description": "Multiple ID values can be provided with comma separated strings",
                "operationId": "list",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID values that need to be considered for filter",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Account"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid id value"
                    }
                },
                "security": [
                    {
                        "automator_auth": [
                            "write:items",
                            "read:items"
                        ]
                    }
                ]
            }
        },
        "/content": {
            "get": {
                "tags": [
                    "content"
                ],
                "summary": "searches content",
                "operationId": "searchContent",
                "description": "By passing in the appropriate options, you can search for\navailable content in the system\n",
                "parameters": [
                    {
                        "in": "query",
                        "name": "searchString",
                        "description": "pass an optional search string for looking up content",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "description": "number of records to skip for pagination",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 0
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "maximum number of records to return",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 0,
                            "maximum": 50
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "search results matching criteria",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Content"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "bad input parameter"
                    }
                }
            },
            "post": {
                "tags": [
                    "content"
                ],
                "summary": "adds an content item",
                "operationId": "addContent",
                "description": "Adds an item to the system",
                "responses": {
                    "201": {
                        "description": "item created"
                    },
                    "400": {
                        "description": "invalid input, object invalid"
                    },
                    "409": {
                        "description": "an existing item already exists"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Content"
                            }
                        }
                    },
                    "description": "Content item to add"
                },
                "parameters": []
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "Interesting thought but not sure what we would think of this situation.",
                "operationId": "loginUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The user name for login",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "X-Rate-Limit": {
                                "description": "calls per hour allowed by the user",
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "X-Expires-After": {
                                "description": "date in UTC when token expires",
                                "schema": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                },
                "externalDocs": {
                    "url": "http://starter.io/docs/"
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutUser",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "parameters": []
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Starter Ignite",
        "url": "https://starterinc.github.io/Ignite/"
    },
    "components": {
        "securitySchemes": {
            "automator_auth": {
                "type": "oauth2",
                "flows": {
                    "implicit": {
                        "authorizationUrl": "http://apicloud.co/oauth/dialog",
                        "scopes": {
                            "write:items": "modify items in your account",
                            "read:items": "read your items"
                        }
                    }
                }
            },
            "api_key": {
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
            }
        },
        "schemas": {
            "Account": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "balance": {
                        "type": "number",
                        "format": "double",
                        "description": "Account balance point in time",
                        "x-starter-dataField": "component=AccountBalance/"
                    },
                    "institutionName": {
                        "type": "string"
                    },
                    "accountNumber": {
                        "type": "string",
                        "x-starter-secureField": true
                    },
                    "routingNumber": {
                        "type": "string"
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "description": "Account Status",
                        "enum": [
                            "ready",
                            "closed",
                            "executed"
                        ]
                    },
                    "verified": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "xml": {
                    "name": "Account"
                }
            },
            "LedgerEntry": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "accountId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "orderId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "entryValue": {
                        "type": "number",
                        "format": "double"
                    },
                    "institutionName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "accountBalance": {
                        "type": "number",
                        "format": "double"
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "description": "Transaction Status",
                        "enum": [
                            "ready",
                            "closed",
                            "executed"
                        ]
                    },
                    "transactionType": {
                        "type": "string",
                        "description": "Transaction Type",
                        "enum": [
                            "debit",
                            "credit",
                            "deposit",
                            "void",
                            "refund"
                        ]
                    },
                    "verified": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "xml": {
                    "name": "Account"
                }
            },
            "Order": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "tradeId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "executionDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                            "placed",
                            "approved",
                            "executed"
                        ]
                    },
                    "complete": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "xml": {
                    "name": "Order"
                }
            },
            "Content": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "author",
                    "organization",
                    "releaseDate"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "example": "Widget Adapter"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "releaseDate": {
                        "type": "string",
                        "format": "int32",
                        "example": "2016-08-29T09:12:33.001Z"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/Organization"
                    }
                },
                "xml": {
                    "name": "Content"
                }
            },
            "Organization": {
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "example": "ACME Corporation"
                    },
                    "homePage": {
                        "type": "string",
                        "format": "url",
                        "example": "https://www.acme-corp.com"
                    },
                    "phone": {
                        "type": "string",
                        "example": "408-867-5309"
                    }
                },
                "xml": {
                    "name": "Organization"
                }
            },
            "Trade": {
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "example": "Litespeed"
                    },
                    "type": {
                        "type": "string",
                        "example": "MARKET"
                    }
                },
                "xml": {
                    "name": "Trade"
                }
            },
            "User": {
                "required": [
                    "id",
                    "username",
                    "email"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fingerprint": {
                        "type": "string",
                        "example": "DK$DFSJaraDD",
                        "x-starter-secureField": true
                    },
                    "ssn": {
                        "description": "This is the value",
                        "type": "string",
                        "example": "111-22-3333",
                        "maxLength": 10,
                        "minLength": 10,
                        "x-starter-secureField": true
                    },
                    "username": {
                        "type": "string",
                        "example": "Sparky"
                    },
                    "homePage": {
                        "type": "string",
                        "format": "url",
                        "example": "https://www.acme-corp.com"
                    },
                    "social": {
                        "type": "string",
                        "format": "url",
                        "example": "https://twitter.com/StarterIO"
                    }
                },
                "xml": {
                    "name": "User"
                }
            },
            "WorkFlows": {
                "required": [
                    "id",
                    "description",
                    "json"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fingerprint": {
                        "type": "string",
                        "example": "DK$DFSJaraDD"
                    },
                    "sourceType": {
                        "type": "string",
                        "example": "user"
                    },
                    "sourceOwner": {
                        "type": "string",
                        "example": "userId:d290f1ee-6c54-4b01-90e6-d701748f0851"
                    },
                    "json": {
                        "type": "string",
                        "example": "Sparkyt",
                        "description": "this value is the JSON content of the WorkFlow definition"
                    },
                    "xml": {
                        "type": "string",
                        "example": "Sparkyt"
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "xml": {
                    "name": "Workflows"
                }
            },
            "Exchange": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "ticker"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "example": "Bitfinex"
                    },
                    "ticker": {
                        "type": "string",
                        "example": "GDX"
                    },
                    "lastValidatedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/Organization"
                    },
                    "country": {
                        "type": "string",
                        "example": "CAN"
                    }
                },
                "xml": {
                    "name": "Exchange"
                }
            },
            "ContactMethod": {
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "ticker"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "messageTypeDescription": {
                        "type": "string",
                        "example": "twitter handle"
                    },
                    "messageType": {
                        "type": "string",
                        "example": "email",
                        "enum": [
                            "github",
                            "email",
                            "twitter",
                            "mobile",
                            "sms",
                            "facebook"
                        ]
                    },
                    "createDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "description": "Contact Method Status",
                        "enum": [
                            "new",
                            "validated",
                            "closed",
                            "DNC",
                            "ADMIN"
                        ]
                    },
                    "complete": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "xml": {
                    "name": "ContactMethod"
                }
            },
            "AuditLog": {
                "required": [
                    "id",
                    "sourceType",
                    "json"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fingerprint": {
                        "type": "string",
                        "example": "DK$DFSJaraDD"
                    },
                    "sourceType": {
                        "type": "string",
                        "example": "user"
                    },
                    "sourceOwner": {
                        "type": "string",
                        "example": "userId:1000"
                    },
                    "json": {
                        "type": "string",
                        "example": "Sparkyt",
                        "maxLength": 10000
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "xml": {
                    "name": "AuditLog"
                }
            },
            "Data": {
                "required": [
                    "id",
                    "sourceType",
                    "json"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fingerprint": {
                        "type": "string",
                        "example": "DK$DFSJaraDD"
                    },
                    "sourceType": {
                        "type": "string",
                        "example": "user"
                    },
                    "sourceOwner": {
                        "type": "string",
                        "example": "userId:1000"
                    },
                    "json": {
                        "type": "string",
                        "example": "Sparkyt",
                        "maxLength": 10000
                    },
                    "modifiedDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "xml": {
                    "name": "Data"
                }
            },
            "Category": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Category"
                }
            },
            "Tag": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Tag"
                }
            },
            "Item": {
                "type": "object",
                "required": [
                    "name",
                    "photoUrls"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    },
                    "name": {
                        "type": "string",
                        "example": "doggie"
                    },
                    "photoUrls": {
                        "type": "array",
                        "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                        },
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "xml": {
                            "name": "tag",
                            "wrapped": true
                        },
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "item status in the store",
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ]
                    }
                },
                "xml": {
                    "name": "Item"
                }
            },
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        },
        "links": {},
        "callbacks": {}
    },
    "security": []
}